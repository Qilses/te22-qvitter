{%extends "layout.njk"%}
{%block content%}

<main>

  <h1>{{ message }}</h1>
  
  <style>
    
    .HamburgerMenu {
      display: grid;
      grid-template-columns: auto;
      border: none;
      width: 100px;
      height: 100px;
      background-color: rgba(249, 236, 217, 255);
    }

    .topnav {
      overflow: hidden;
      position: relative;
    }

    .topnav #myLinks {
      display: none;
    }

    .topnav a {
      color: white;
      padding: 14px 16px;
      text-decoration: none;
      font-size: 17px;
      display: block;
      background-color: black;
      width: 1px;
      height: 1px;
    }
  </style>

  <button class="HamburgerMenu">
    <a href="javascript:void(0);" class="icon" onclick="myFunction()">
      <img src="/img/NavMenu.webp" alt="ham">
      <i class="fa fa-bars"></i>
  </button>

  <div class="topnav">
      <div id="myLinks">
        <a href="#news">News</a>
        <a href="#contact">Contact</a>
        <a href="#about">About</a>
        <a href="/tweets/new">Skapa egen Qvitt</a>
      </div>
    </div>
  </div>

  <script>
    function myFunction() {
      var x = document.getElementById("myLinks");
      if (x.style.display === "block") {
        x.style.display = "none";
      } else {
        x.style.display = "block";
      }
    }
  </script>




  {% for tweet in tweets %}
  <li class="tweet">

    <article>
      <h1>{{ tweet.message }}</h1>
      <header>
        <h2>{{ tweet.name }}</h2>
        <time datetime="{{ tweet.date }}">{{ tweet.date }}</time>
      </header>
      <footer>
        <ul>
          <li><button>Shared</button></li>
          <li><button>Reply</button></li>
          <li><button>Favourite</button></li>
          <li><button><a href="/">Edit</a></button></li>
          <li><button><a href="/tweets/{{ tweet.id }}/delete">Skr√§pa</a></button></li>
        </ul>
      </footer>
    </article>
  </li>
  {% endfor %}

  </ul>
</main>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const timeElements = document.querySelectorAll("time[datetime]");
    timeElements.forEach(timeElement => {
      const date = new Date(timeElement.getAttribute("datetime"));
      const now = new Date();
      const diffInSeconds = Math.floor((now - date) / 1000);
      const diffInMinutes = Math.floor(diffInSeconds / 60);
      const diffInHours = Math.floor(diffInMinutes / 60);
      const diffInDays = Math.floor(diffInHours / 24);

      let displayText;
      if (diffInDays > 0) {
        displayText = `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
      } else if (diffInHours > 0) {
        displayText = `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
      } else if (diffInMinutes > 0) {
        displayText = `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
      } else {
        displayText = `${diffInSeconds} second${diffInSeconds > 1 ? 's' : ''} ago`;
      }

      timeElement.textContent = displayText;
    });
  });
</script>
{%endblock%}